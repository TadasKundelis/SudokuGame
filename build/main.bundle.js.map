{"version":3,"sources":["webpack:///webpack/bootstrap 2db2ee61b6db74a13b54","webpack:///./js/main.js","webpack:///./js/sudokuClass.js","webpack:///./js/boardClass.js","webpack:///./js/cellClass.js","webpack:///./js/solverClass.js","webpack:///./js/validatorClass.js","webpack:///./js/DOMtableClass.js"],"names":["sudoku","generateNew","document","getElementById","addEventListener","solve","reset","table","create","Sudoku","numberOfEmptyCellsAtStart","solvedBoard","currentBoard","terminalPattern","startingBoard","array","i","rnd","Math","floor","random","temp","slice","digHoles","setInitialState","numberOfEmptyCells","validator","display","map","x","positions","j","push","randomIndex","reverse","concat","forEach","puzzle","contraint","board","solver","run","check","confirm","Board","cells","emptyPositions","row","returnAsObject","obj","value","col","arr","a","b","constraint","getRow","getColumn","getBox","box","filterCandidates","length","candidates","filter","current","initCandidates","Cell","y","previousCell","mergedArray","indexOf","Solver","boardMethods","currentCell","noSolution","selectStartingCell","setCurrentCellValue","selectNextCell","solution","backtrack","resetCandidates","updateCandidates","Validator","previousValue","nextValue","removeConflicts","conflictCells","checkForConflicts","highlightError","finalChecker","setTimeout","displaySuccess","removeError","divFields","querySelectorAll","DOMtable","inputFields","currentField","previousField","id","handleKeyboardEvent","bind","highlightCurrentField","innerHTML","removeAttribute","classList","n","cl","item","setAttribute","add","event","window","keyValue","key","split","test","preventDefault","highlightArrowMovement","hasAttribute","updateBoard","fieldToHighlight","remove","target","replace","errorList","errorField","contains","field","alert"],"mappings":"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","file":"main.bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 2db2ee61b6db74a13b54","\r\nimport Sudoku from './sudokuClass';\r\n\r\nvar sudoku = new Sudoku();\r\nsudoku.generateNew();\r\n\r\ndocument.getElementById('generateNew').addEventListener('click', () => sudoku.generateNew())\r\ndocument.getElementById('solve').addEventListener('click', () => sudoku.solve())\r\ndocument.getElementById('reset').addEventListener('click', () => sudoku.reset())\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/main.js","import Board from './boardClass';\r\nimport Solver from './solverClass';\r\nimport Validator from './validatorClass';\r\nimport DOMtable from './DOMtableClass.js';\r\n\r\nconst table = new DOMtable();\r\ntable.create();\r\n\r\nexport default class Sudoku {\r\n  constructor() {\r\n    this.numberOfEmptyCellsAtStart\r\n    this.solvedBoard;  \r\n    this.currentBoard;\r\n    this.terminalPattern; \r\n  }\r\n\r\n  generateNew() {\r\n    let startingBoard =  [[0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0], \r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n                          [0, 0, 0, 0, 0, 0, 0, 0, 0]];\r\n  \r\n    let array = [1,2,3,4,5,6,7,8,9];\r\n    \r\n    //for loop shuffles the array\r\n    for (let i = 0; i < 9; i++) {\r\n      let rnd = Math.floor(Math.random() * 9)\r\n      let temp = array[i];\r\n      array[i] = array[rnd];\r\n      array[rnd] = temp;\r\n    }\r\n    startingBoard[0] = array.slice(); //make the first array of the matrix random\r\n    this.solvedBoard = this.solve(startingBoard); //solve the puzzle and create a complete grid\r\n    this.digHoles() // let's dig some holes to create the terminal pattern\r\n    this.currentBoard = new Board(); //make current board a Board instance so we can use Board object methods\r\n    this.currentBoard.setInitialState(this.terminalPattern)\r\n    this.numberOfEmptyCellsAtStart = this.currentBoard.numberOfEmptyCells\r\n    table.validator = new Validator(table, this.currentBoard, this.currentBoard.numberOfEmptyCells) // create a connection between DOM table (view) and Validator class\r\n    table.display(this.terminalPattern) // pass the terminal pattern to the view\r\n  }\r\n  \r\n  digHoles() {\r\n    this.terminalPattern = this.solvedBoard.slice().map(x => x.slice())\r\n\t  let positions = [];\r\n\t  for (let i = 0; i < 9; i++) {\r\n\t    for (let j = 0; j < 9; j++) {\r\n\t      positions.push([i, j])\r\n\t    }\r\n\t  }\r\n\t\r\n\tlet randomIndex = Math.floor(Math.random() * 81)\r\n  //let's make hole digging more random my reversing a part of the indices array\r\n\tpositions = positions.slice(0, randomIndex).reverse().concat(positions.slice(randomIndex)) \r\n\t\r\n    positions.forEach( ([i, j]) => {\r\n\t  let temp = this.terminalPattern[i][j];\r\n      this.terminalPattern[i][j] = 0; // make the current value a 0 and check if the puzzle still has only one possible solution\r\n      if (this.solve(this.terminalPattern, [i, j, temp])) { //if it can be solved with another character\r\n        this.terminalPattern[i][j] = temp; // don't make it a zero, leave the current value\r\n      }\r\n    })\r\n  }\r\n\r\n  solve(puzzle, contraint = []){\r\n    if (!puzzle) { // if there is no puzzle provided, that means user hit 'solve' button\r\n      table.display(this.solvedBoard) // just display the solution\r\n      return\r\n    } \r\n    const board = new Board(); \r\n    board.setInitialState(puzzle, contraint);\r\n    const solver = new Solver(board);\r\n    return solver.run() \r\n  }\r\n\r\n  reset() {\r\n    let check = confirm('Are you sure you want to reset the puzzle?')\r\n    if (check) {\r\n      table.display(this.terminalPattern)\r\n      this.numberOfEmptyCells = this.numberOfEmptyCellsAtStart\r\n      this.currentBoard = new Board(); \r\n      this.currentBoard.setInitialState(this.terminalPattern)\r\n      table.validator = new Validator(table, this.currentBoard, this.numberOfEmptyCells)\r\n    }\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./js/sudokuClass.js","import Cell from './cellClass';\r\n\r\nexport default class Board {\r\n  constructor(){\r\n    this.cells = []; //array for holding Cell objects\r\n    this.emptyPositions = []; // array for storing coordinates of empty cells\r\n    this.numberOfEmptyCells = 0; \r\n  }\r\n  \r\n  //returnAsObject parameter checks if we want to return primitive values or Cell object instances\r\n\r\n  getRow(row, returnAsObject = false) {\r\n    if (returnAsObject) {\r\n      return this.cells[row].map(obj => obj);\r\n    } else {\r\n      return this.cells[row].map(obj => obj.value);\r\n    }\r\n  }\r\n\r\n  getColumn(col, returnAsObject = false) {\r\n    let arr = [];\r\n    this.cells.forEach(row => arr.push(row[col]))\r\n    if (returnAsObject) {\r\n      return arr\r\n    } else {\r\n      return arr.map(obj => obj.value)\r\n    }\r\n  }\r\n\r\n  getBox(row, col, returnAsObject = false) {\r\n    let arr = [];\r\n    let a = Math.floor(row/3);\r\n    let b = Math.floor(col/3);\r\n    this.cells.slice(a * 3, a * 3 + 3).forEach(x => arr = arr.concat(x.slice(b * 3, b * 3 + 3)))\r\n    if (returnAsObject) {\r\n      return arr\r\n    } else {\r\n      return arr.map(obj => obj.value)\r\n    }\r\n  }\r\n\r\n  setInitialState(puzzle, constraint = []){\r\n    //assign every cell a Cell object\r\n    for (let i = 0; i < 9; i++) {\r\n    this.cells[i] = [];\r\n      for (let j = 0; j < 9; j++) {\r\n        this.cells[i][j] = new Cell(puzzle[i][j], i, j)\r\n      }\r\n    }\r\n\r\n    //set initial candidates for every Cell object, get number of empty cells and their coordinates\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (puzzle[i][j] === 0) {\r\n          this.emptyPositions.push([i, j])\r\n          this.numberOfEmptyCells++\r\n          let [row, col, box] = [this.getRow(i), this.getColumn(j), this.getBox(i, j)]\r\n          this.cells[i][j].filterCandidates(row, col, box)\r\n          if (constraint.length) {\r\n            let [row, col, value] = constraint;\r\n            if (i === row && j === col) {\r\n              this.cells[i][j].candidates = this.cells[i][j].candidates.filter(current => current != value)\r\n            }\r\n          }\r\n        this.cells[i][j].initCandidates = this.cells[i][j].candidates.slice() \r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/boardClass.js"," export default class Cell {\r\n  constructor(value, x, y){\r\n    this.value = value;\r\n    this.x = x; // row index\r\n    this.y = y; // column index\r\n    this.candidates = [1,2,3,4,5,6,7,8,9]; // array holding current candidates, based on the situation on the board\r\n    this.initCandidates = []; //default candidates that are set up when Board object instance is set up\r\n    this.previousCell; //in the case where we need to backtrack, we need to check the previous Cell, this creates a sort of linked listed of nodes\r\n  }\r\n\r\n  filterCandidates (row, col, box) {\r\n    const mergedArray = [...row, ...col, ...box];\r\n    this.candidates = this.candidates.filter(value => mergedArray.indexOf(value) === -1)\r\n  }\r\n\r\n  resetCandidates (){\r\n    this.candidates = this.initCandidates;\r\n  }\r\n}\n\n\n// WEBPACK FOOTER //\n// ./js/cellClass.js","export default class Solver {\r\n  constructor(board){\r\n    this.board = board.cells; // matrix storing values\r\n    this.boardMethods = board; // reference to Board object\r\n    this.numberOfEmptyCells = board.numberOfEmptyCells;\r\n    this.emptyPositions = board.emptyPositions; \r\n    this.currentCell;\r\n    this.previousCell; \r\n    this.noSolution = false;\r\n  }\r\n\r\n  run() {\r\n    while(this.numberOfEmptyCells) { \r\n      if (!this.currentCell) {\r\n        this.selectStartingCell()\r\n      }\r\n      this.setCurrentCellValue()\r\n      this.selectNextCell()\r\n      if (this.noSolution) {\r\n        return false\r\n      }\r\n    }\r\n    let solution = [];\r\n    for (let i = 0; i < 9; i++) {\r\n      solution[i] = [];\r\n      for (let j = 0; j < 9; j++) {\r\n        solution[i][j] = this.board[i][j].value\r\n      }\r\n    }\r\n    return solution\r\n  }\r\n\r\n  selectStartingCell() {\r\n    let [x, y] = this.emptyPositions[0];\r\n    this.currentCell = this.board[x][y];\r\n    for (let i = 1; i < this.emptyPositions.length; i++) {\r\n      [x, y] = this.emptyPositions[i];\r\n      if (this.board[x][y].candidates.length < this.currentCell.candidates.length) { // find the cell with least candidates for optimization\r\n        this.currentCell = this.board[x][y]\r\n      }\r\n    }\r\n  }\r\n\r\n  setCurrentCellValue() {\r\n    if (!this.currentCell.candidates[0]) {\r\n      return this.backtrack()\r\n    }\r\n    this.currentCell.value = this.currentCell.candidates[0] //always take first candidate\r\n    this.numberOfEmptyCells-- // decrement number of empty cells\r\n  }\r\n\r\n  selectNextCell() {\r\n    let length = 9;\r\n    this.previousCell = this.currentCell; \r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (this.board[i][j].value === 0) { \r\n          this.board[i][j].resetCandidates(); //need to reset to default candidates for every check\r\n          let [row, col, box] = [this.boardMethods.getRow(i), this.boardMethods.getColumn(j), this.boardMethods.getBox(i, j)]\r\n          this.board[i][j].filterCandidates(row, col, box)\r\n          if (this.board[i][j].candidates.length === 0) { //if there is at least one cell without candidates\r\n            this.numberOfEmptyCells++ //increment number of empty cells\r\n            this.board[i][j].resetCandidates(); // reset its candidates\r\n            this.currentCell = this.previousCell; //backtrack\r\n            return this.backtrack() \r\n          } else {\r\n            if (this.board[i][j].candidates.length < length) {// find the cell with least candidates\r\n              this.currentCell = this.board[i][j] // make it current cell\r\n              this.currentCell.previousCell = this.previousCell; // \r\n              length = this.currentCell.candidates.length\r\n            }\r\n          }\r\n        } \r\n      }\r\n    }\r\n  }\r\n\r\n  updateCandidates() { \r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        if (this.board[i][j].value === 0){\r\n          this.board[i][j].resetCandidates();\r\n          let [row, col, box] = [this.boardMethods.getRow(i), this.boardMethods.getColumn(j), this.boardMethods.getBox(i, j)]\r\n          this.board[i][j].filterCandidates(row, col, box)\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  backtrack() {\r\n    this.currentCell.value = 0; // reset value\r\n    this.currentCell.candidates = this.currentCell.candidates.slice(1) // cannot take the first value\r\n    let [x, y] = [this.currentCell.x, this.currentCell.y]\r\n    let [row, col, box] = [this.boardMethods.getRow(x), this.boardMethods.getColumn(y), this.boardMethods.getBox(x, y)]\r\n    this.currentCell.filterCandidates(row, col, box) \r\n    while (!this.currentCell.candidates.length) { //keep backtracking while the current cell has no candidates\r\n      this.numberOfEmptyCells++\r\n      this.currentCell.value = 0;\r\n      this.currentCell.resetCandidates();\r\n      this.updateCandidates();\r\n      if (!this.currentCell.previousCell) {\r\n        this.noSolution = true\r\n        return\r\n      }\r\n      this.currentCell = this.currentCell.previousCell\r\n      this.currentCell.candidates = this.currentCell.candidates.slice(1)\r\n      let [x, y] = [this.currentCell.x, this.currentCell.y]\r\n      let [row, col, box] = [this.boardMethods.getRow(x), this.boardMethods.getColumn(y), this.boardMethods.getBox(x, y)]\r\n      this.currentCell.filterCandidates(row, col, box)\r\n    } \r\n    this.setCurrentCellValue();\r\n    this.selectNextCell();\r\n  }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/solverClass.js","export default class Validator {\r\n  constructor(table, currentBoard, numberOfEmptyCells) {\r\n    this.table = table; // reference to the DOM table/view \r\n    this.currentBoard = currentBoard; \r\n    this.numberOfEmptyCells = numberOfEmptyCells; // number of empty cells left on the board\r\n  } \r\n\r\n  updateBoard(row, col, previousValue, nextValue){\r\n    this.currentBoard.cells[row][col].value = nextValue;\r\n    if (nextValue != '') { // if user enters a number\r\n      if (previousValue === '') { // and previous value was '' (empty field)\r\n        --this.numberOfEmptyCells // decrement number of empty cells\r\n      }\r\n      this.removeConflicts(row, col) // check if any errors can be removed\r\n      let conflictCells = this.checkForConflicts(row, col, nextValue) // check for new conflicts/errors\r\n      if (conflictCells.length) {\r\n        this.table.highlightError(conflictCells) //highlight the errors\r\n      }\r\n      if (this.numberOfEmptyCells === 0) { // if there are no more empty fields left\r\n        if (this.finalChecker()) { // if final checker return true\r\n          setTimeout(this.table.displaySuccess, 1) //set timeout so the last number is displayed before the success alert\r\n          return\r\n        }\r\n      }\r\n    } else {\r\n      if (previousValue != '') { //if user presses backspace and previous value was a number (not empty field)\r\n        ++this.numberOfEmptyCells; // increase the number of empty cells\r\n      }\r\n      this.removeConflicts(row, col) //check if any errors can be removed\r\n    }\r\n  }\r\n\r\n  checkForConflicts(x, y, value) {\r\n    //collect row, column and box for the provided coordinates and check if the value of the current cell is repeated\r\n    let [row, col, box] = [this.currentBoard.getRow(x, true), this.currentBoard.getColumn(y, true), this.currentBoard.getBox(x, y, true)]\r\n    return [...row, ...col, ...box].filter(current => current.value == value && (current.x != x || current.y != y))\r\n  }\r\n\r\n  removeConflicts(x, y){\r\n    let [row, col, box] = [this.currentBoard.getRow(x, true), this.currentBoard.getColumn(y, true), this.currentBoard.getBox(x, y, true)]\r\n    \r\n    row.concat(col).concat(box).forEach(current => {\r\n      let conflictCells = this.checkForConflicts(current.x, current.y, current.value);\r\n      if (!conflictCells.length) {\r\n        this.table.removeError(current)\r\n      }\r\n    })\r\n  }\r\n  \r\n  finalChecker(){\r\n    //final checker checks all cells for conflicts before displaying the success message\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        let conflictCells = this.checkForConflicts(i, j, this.currentBoard.cells[i][j].value)\r\n        if (conflictCells.length) {\r\n          return  false;\r\n        }\r\n      }\r\n    }\r\n    return true\r\n  }\r\n\r\n}\n\n\n// WEBPACK FOOTER //\n// ./js/validatorClass.js","const table = document.getElementById('table');\r\nconst divFields = table.querySelectorAll('div')\r\n\r\n/*\r\nDOMtable class provides a reference to the DOM table to avoid using document.getElementById all the time\r\nEach input field has a unique ID and the necessary event listeners attached to it\r\n*/\r\n\r\nexport default class DOMtable{\r\n\tconstructor() {\r\n\t\tthis.inputFields = []; //array for storing DOM div nodes that are inside table td nodes\r\n\t\tthis.currentField; // current div that has focus\r\n\t\tthis.previousField; \r\n\t\tthis.validator; //reference/connection to the validator class that checks user's entered values\r\n\t}\r\n    \r\n\tcreate(){\r\n    for (let i = 0; i < 9; i++) {\r\n  \t  this.inputFields[i] = [];\r\n        for (let j = 0; j < 9; j++) {\r\n          let current = divFields[i * 9 + j];\r\n          current.id = `${i}-${j}` //element id is created using the format \"row-col\" (ex. 0-0) to make it unique\r\n          current.addEventListener('keydown', this.handleKeyboardEvent.bind(this))\r\n          current.addEventListener('mousedown', this.highlightCurrentField.bind(this))\r\n          this.inputFields[i][j] = current\r\n        }\r\n      }\r\n\t  }\r\n\r\n  display(board) {\r\n    for (let i = 0; i < 9; i++) {\r\n      for (let j = 0; j < 9; j++) {\r\n        let currentField = this.inputFields[i][j];\r\n        currentField.innerHTML = ''; //first of all we need to reset the values\r\n        currentField.removeAttribute('readonly') \r\n        if (currentField.classList.length) {\r\n          for (let n = 0; n < currentField.classList.length; n++) { // for loop is needed because IE does not allow forEach on classList\r\n            let cl = currentField.classList.item(n)\r\n            currentField.removeAttribute('class', cl)\r\n          }\r\n        } \r\n        if(board[i][j] != 0) {\r\n          currentField.innerHTML = board[i][j]\r\n          currentField.setAttribute('readonly','true') // user should not be able to modify the terminal pattern\r\n          currentField.classList.add('setValue');\r\n        }\r\n      }\r\n    }  \r\n  }\r\n\r\n  handleKeyboardEvent(event){\r\n    event = event || window.event; \r\n\t  let keyValue = event.key;\r\n\t  let id = this.currentField.id;\r\n    let [row, col] = id.split('-'); // id format is \"row-col\", we can get the coordinates by removing the hyphen \r\n\t  if (/^(Arrow)*(Up|Down|Right|Left)$/.test(keyValue)) {\r\n      event.preventDefault();\r\n\t  \tthis.highlightArrowMovement(keyValue, row, col) \r\n\t  } else if (keyValue === 'Backspace' || keyValue === 'Delete') {\r\n\t  \tevent.preventDefault(); // this is needed to prevent IE and mozzila from returning to a previous page when user hits backspace\r\n        if (!this.currentField.hasAttribute('readonly')) {\r\n\t  \t  this.validator.updateBoard(row, col, this.currentField.innerHTML, '')\r\n\t  \t  this.currentField.innerHTML = '';\r\n\t  \t} else { // if the field is readonly \r\n        return\r\n\t  \t}\r\n\t  } else if (/[1-9]/.test(keyValue)) { //numbers between [1-9]\r\n\t  \tif (!this.currentField.hasAttribute('readonly')) { //update the value if the field is not readonly\r\n\t  \t  let previousValue = this.currentField.innerHTML;\r\n      \tthis.currentField.innerHTML = keyValue;\r\n      \tthis.validator.updateBoard(row, col, previousValue, keyValue)\r\n      \t} else {\r\n      \t  return\r\n      \t}\r\n      } else { // if any other key is pressed, prevent default behaviour\r\n      \treturn event.preventDefault();\r\n      }\r\n    }\r\n\r\n    highlightCurrentField(event, fieldToHighlight){\r\n\t  if (this.currentField) { //if there is already a current field\r\n\t    this.previousField = this.currentField; //make it previous field\r\n\t\t  this.previousField.classList.remove('current') \r\n\t\t  //event.target is provided by mousedown event, if it's absent, we use second parameter provided by highlightArrowMovement function\r\n\t\t  this.currentField = event ? event.target : fieldToHighlight; \r\n\t  } else { //if there's no current field, make event target current field\r\n\t\t  this.currentField = event.target;\r\n    }\r\n\t  this.currentField.classList.add('current')\r\n\t}\r\n\r\n\thighlightArrowMovement(keyValue, row, col){\r\n      let fieldToHighlight;\r\n      keyValue = keyValue.replace('Arrow', '');\r\n\t    switch(keyValue) {\r\n          case 'Left':\r\n            if (col > 0) {\r\n              --col\r\n              break;\r\n            } else {\r\n              return\r\n            }\r\n          case 'Up':\r\n            if (row > 0) {\r\n              --row\r\n              break;\r\n            } else {\r\n              return\r\n            }\r\n          case 'Right':\r\n            if (col < 8) {\r\n              ++col\r\n              break;\r\n            } else {\r\n              return\r\n            }\r\n          case 'Down':\r\n            if (row < 8) {\r\n              ++row\r\n              break;\r\n            } else {\r\n              return\r\n            }\r\n    \t}\r\n        fieldToHighlight = this.inputFields[row][col]\r\n        this.highlightCurrentField(null, fieldToHighlight)\r\n    }\r\n\r\n    highlightError(errorList) {\r\n      //errorList array contains Cell objects, so we can get their row and columnn values by getting x and y properties\r\n      errorList.forEach((errorField) => {\r\n      \tlet [row, col] = [errorField.x, errorField.y] \r\n      \tif (!this.inputFields[row][col].classList.contains('error')) {\r\n      \t  this.inputFields[row][col].classList.add('error')\t\r\n      \t}\r\n      })\r\n      this.currentField.classList.add('error')\r\n    }\r\n\r\n    removeError(field) {\r\n      let [row, col] = [field.x, field.y];\r\n      // change in the current field triggered the removal of error, so there is no error in the current field as well\r\n      this.currentField.classList.remove('error') \r\n      this.inputFields[row][col].classList.remove('error')\r\n    }\r\n\r\n    displaySuccess() {\r\n      alert('Congratulations! You have solved the puzzle!')\r\n    }\r\n    \r\n}\r\n\r\n\r\n\n\n\n// WEBPACK FOOTER //\n// ./js/DOMtableClass.js"],"sourceRoot":""}